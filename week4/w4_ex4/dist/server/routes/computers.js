"use strict";
var express = require("express");
var computer = require("../model/computer");
var computersModel = require("../model/computers");
var computers = (function () {
    function computers() {
        this.computerList = new computersModel.computers([
            new computer.computer(1, 'In Search of Lost Time', 'Marcel Proust', 1913),
            new computer.computer(2, 'Ulysses', 'James Joyce', 1904),
            new computer.computer(3, 'Moby Dick', 'Herman Melville', 1851),
            new computer.computer(4, 'Nineteen Eighty Four', 'George Orwell', 1949)
        ]);
    }
    computers.routes = function () {
        var router = express.Router();
        var computersRoute = new computers();
        router.get('/computers/', computersRoute.index.bind(computersRoute));
        router.post('/computers/', computersRoute.create.bind(computersRoute));
        router.put('/computers/:computer_id', computersRoute.update.bind(computersRoute));
        router.delete('/computers/:computer_id', computersRoute.delete.bind(computersRoute));
        router.get('/computers/:computer', computersRoute.find.bind(computersRoute));
        router.post('/computers/delete/:computer_id', computersRoute.delete.bind(computersRoute));
        router.post('/computers/update/:computer_id', computersRoute.update.bind(computersRoute));
        return router;
    };
    computers.prototype.index = function (request, response) {
        response.json(this.computerList.list());
    };
    computers.prototype.create = function (request, response) {
        var computerTitle = request.body.computer_title;
        var computerAuthor = request.body.computer_author;
        var computerPublicationDate = request.body.computer_pdate;
        if (!computerTitle) {
            response.status(500).send('computer title not found');
            return;
        }
        if (!computerAuthor) {
            response.status(500).send('computer author not found');
            return;
        }
        if (!computerPublicationDate) {
            response.status(500).send('computer publication date not found');
            return;
        }
        response.json(this.computerList.add(computerTitle, computerAuthor, computerPublicationDate));
    };
    computers.prototype.update = function (request, response) {
        var computerId = parseInt(request.params.computer_id);
        var computer = this.computerList.fetch(computerId);
        var computerTitle = request.body.computer_title;
        var computerAuthor = request.body.computer_author;
        var computerPublicationDate = request.body.computer_pdate;
        if (!computer) {
            response.status(404).send('computer not found');
            return;
        }
        if (computerTitle !== undefined) {
            computer.setTitle(computerTitle);
        }
        if (computerAuthor !== undefined) {
            computer.setAuthor(computerAuthor);
        }
        if (computerPublicationDate !== undefined) {
            computer.setPublicationDate(computerPublicationDate);
        }
        response.json(computer);
    };
    computers.prototype.delete = function (request, response) {
        var computerId = parseInt(request.params.computer_id);
        var wasDeleted = this.computerList.delete(computerId);
        if (!wasDeleted) {
            response.status(404).send('computer not found');
            return;
        }
        else {
            response.json({ success: true });
        }
    };
    computers.prototype.find = function (request, response) {
        var computerQuery = request.params.computer;
        var computer = this.computerList.find(computerQuery);
        if (!computer) {
            response.status(404).send('computer not found');
            return;
        }
        response.json(computer);
    };
    return computers;
}());
exports.computers = computers;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
